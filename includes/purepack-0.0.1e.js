
(function(/*! Stitch !*/) {
  if (!this.require) {
    var modules = {}, cache = {}, require = function(name, root) {
      var path = expand(root, name), module = cache[path], fn;
      if (module) {
        return module.exports;
      } else if (fn = modules[path] || modules[path = expand(path, './index')]) {
        module = {id: path, exports: {}};
        try {
          cache[path] = module;
          fn(module.exports, function(name) {
            return require(name, dirname(path));
          }, module);
          return module.exports;
        } catch (err) {
          delete cache[path];
          throw err;
        }
      } else {
        throw 'module \'' + name + '\' not found';
      }
    }, expand = function(root, name) {
      var results = [], parts, part;
      if (/^\.\.?(\/|$)/.test(name)) {
        parts = [root, name].join('/').split('/');
      } else {
        parts = name.split('/');
      }
      for (var i = 0, length = parts.length; i < length; i++) {
        part = parts[i];
        if (part == '..') {
          results.pop();
        } else if (part != '.' && part != '') {
          results.push(part);
        }
      }
      return results.join('/');
    }, dirname = function(path) {
      return path.split('/').slice(0, -1).join('/');
    };
    this.require = function(name) {
      return require(name, '');
    }
    this.require.define = function(bundle) {
      for (var key in bundle)
        modules[key] = bundle[key];
    };
  }
  return this.require.define;
}).call(this)({"buffer": function(exports, require, module) {// Generated by IcedCoffeeScript 1.3.3g
(function() {
  var Buffer, CharMap, pow2, rshift, _ref;

  _ref = require('./util'), pow2 = _ref.pow2, rshift = _ref.rshift;

  CharMap = (function() {

    function CharMap(s, pad) {
      var c, i, _i, _j, _len, _len1;
      if (pad == null) pad = "";
      this.fwd = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = s.length; _i < _len; _i++) {
          c = s[_i];
          _results.push(c);
        }
        return _results;
      })();
      this.rev = {};
      for (i = _i = 0, _len = s.length; _i < _len; i = ++_i) {
        c = s[i];
        this.rev[c] = i;
      }
      for (_j = 0, _len1 = pad.length; _j < _len1; _j++) {
        c = pad[_j];
        this.rev[c] = 0;
      }
    }

    return CharMap;

  })();

  exports.Buffer = Buffer = (function() {

    Buffer.prototype.B16 = new CharMap("0123456789abcdef");

    Buffer.prototype.B32 = new CharMap("abcdefghijkmnpqrstuvwxyz23456789");

    Buffer.prototype.B64 = new CharMap("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "=");

    Buffer.prototype.B64X = new CharMap("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@_", "=");

    Buffer.prototype.B64A = new CharMap("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-", "=");

    function Buffer() {
      this._buffers = [];
      this._sz = 0x400;
      this._logsz = 10;
      this._push_new_buffer();
      this._i = 0;
      this._b = 0;
      this._cp = 0;
      this._tot = 0;
      this._no_push = false;
    }

    Buffer.prototype._push_new_buffer = function() {
      var nb;
      this._b = this._buffers.length;
      this._i = 0;
      nb = new Uint8Array(this._sz);
      this._buffers.push(nb);
      return nb;
    };

    Buffer.prototype.push_byte = function(b) {
      var buf;
      if (this._no_push) throw new Error("Cannot push anymore into this buffer");
      buf = this._buffers[this._b];
      if (this._i === this._sz) buf = this._push_new_buffer();
      buf[this._i++] = b;
      return this._tot++;
    };

    Buffer.prototype.push_short = function(s) {
      return this.push_ibytes(s, 1);
    };

    Buffer.prototype.push_int = function(i) {
      return this.push_ibytes(i, 3);
    };

    Buffer.prototype.push_buffer = function(b) {
      var i, _i, _ref1;
      for (i = _i = 0, _ref1 = b.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        this.push_byte(b[i]);
      }
      return this;
    };

    Buffer.prototype.push_bytes = function(a) {
      var i, _i, _ref1;
      for (i = _i = 0, _ref1 = a.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        this.push_byte(a.charCodeAt(i));
      }
      return this;
    };

    Buffer.prototype.push_ibytes = function(b, n) {
      var i, _i, _results;
      _results = [];
      for (i = _i = n; n <= 0 ? _i <= 0 : _i >= 0; i = n <= 0 ? ++_i : --_i) {
        _results.push(this.push_byte((b >> (i * 8)) & 0xff));
      }
      return _results;
    };

    Buffer.prototype.toString = function(enc) {
      if (enc == null) enc = 'base64';
      switch (enc) {
        case 'base64':
          return this.base64_encode();
        case 'base64a':
          return this.base64a_encode();
        case 'base64x':
          return this.base64x_encode();
        case 'base32':
          return this.base32_encode();
        case 'hex':
          return this.base16_encode();
        case 'binary':
          return this.binary_encode();
        case 'ui8a':
          return this.ui8a_encode();
      }
    };

    Buffer.prototype.encode = function(e) {
      return this.toString(e);
    };

    Buffer.prototype._get = function(i) {
      var bi, li, lim, ret;
      bi = this._logsz ? i >>> this._logsz : 0;
      li = i % this._sz;
      lim = bi === this._b ? this._i : this._sz;
      ret = bi <= this._b && li < lim ? this._buffers[bi][li] : 0;
      return ret;
    };

    Buffer.prototype.ui8a_encode = function() {
      var i, out, _i, _ref1;
      out = new Uint8Array(this._tot);
      for (i = _i = 0, _ref1 = this._tot; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        out[i] = this._get(i);
      }
      return out;
    };

    Buffer.prototype.binary_encode = function() {
      var i, v;
      v = (function() {
        var _i, _ref1, _results;
        _results = [];
        for (i = _i = 0, _ref1 = this._tot; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          _results.push(this._get(i));
        }
        return _results;
      }).call(this);
      return String.fromCharCode.apply(String, v);
    };

    Buffer.prototype.base16_encode = function() {
      var c, i, tmp, _i, _ref1;
      tmp = "";
      for (i = _i = 0, _ref1 = this._tot; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        c = this._get(i);
        tmp += this.B16.fwd[c >> 4];
        tmp += this.B16.fwd[c & 0xf];
      }
      return tmp;
    };

    Buffer.prototype.base32_encode = function() {
      var b, c, l, outlen, p, _i;
      b = [];
      l = this._tot;
      outlen = Math.floor(l / 5) * 8 + [0, 2, 4, 5, 7][l % 5];
      p = 0;
      for (c = _i = 0; _i < l; c = _i += 5) {
        b[p++] = this.B32.fwd[this._get(c) >> 3];
        if (p < outlen) {
          b[p++] = this.B32.fwd[(this._get(c) & 0x7) << 2 | this._get(++c) >> 6];
        }
        if (p < outlen) b[p++] = this.B32.fwd[this._get(c) >> 1 & 0x1f];
        if (p < outlen) {
          b[p++] = this.B32.fwd[(this._get(c) & 0x1) << 4 | this._get(++c) >> 4];
        }
        if (p < outlen) {
          b[p++] = this.B32.fwd[(this._get(c) & 0xf) << 1 | this._get(++c) >> 7];
        }
        if (p < outlen) b[p++] = this.B32.fwd[this._get(c) >> 2 & 0x1f];
        if (p < outlen) {
          b[p++] = this.B32.fwd[(this._get(c) & 0x3) << 3 | this._get(++c) >> 5];
        }
        if (p < outlen) b[p++] = this.B32.fwd[this._get(c) & 0x1f];
      }
      return b.slice(0, outlen).join('');
    };

    Buffer.prototype.base64_encode = function() {
      return this._base64_encode(this.B64);
    };

    Buffer.prototype.base64a_encode = function() {
      return this._base64_encode(this.B64A);
    };

    Buffer.prototype.base64x_encode = function() {
      return this._base64_encode(this.B64X);
    };

    Buffer.prototype._base64_encode = function(M) {
      var b, c, i, l, n, p, _i, _j;
      b = [];
      l = this._tot;
      c = l % 3;
      p = c > 0 ? (function() {
        var _i, _results;
        _results = [];
        for (i = _i = c; c <= 3 ? _i < 3 : _i > 3; i = c <= 3 ? ++_i : --_i) {
          _results.push('=');
        }
        return _results;
      })() : [];
      for (c = _i = 0; _i < l; c = _i += 3) {
        n = (this._get(c) << 16) + (this._get(c + 1) << 8) + this._get(c + 2);
        for (i = _j = 3; _j >= 0; i = --_j) {
          b.push(M.fwd[(n >>> i * 6) & 0x3f]);
        }
      }
      return (b.slice(0, b.length - p.length).concat(p)).join('');
    };

    Buffer.decode = function(s, enc) {
      switch (enc) {
        case 'binary':
          return (new Buffer).binary_decode(s);
        case 'base64':
          return (new Buffer).base64_decode(s);
        case 'base64a':
          return (new Buffer).base64a_decode(s);
        case 'base64x':
          return (new Buffer).base64x_decode(s);
        case 'base32':
          return (new Buffer).base32_decode(s);
        case 'hex':
          return (new Buffer).base16_decode(s);
        case 'ui8a':
          return (new Buffer).ui8a_decode(s);
      }
    };

    Buffer.prototype.ui8a_decode = function(v) {
      this._buffers = [v];
      this._logsz = 0;
      this._tot = this._sz = this._i = v.length;
      this._no_push = true;
      return this;
    };

    Buffer.prototype.binary_decode = function(b) {
      var i, _i, _ref1;
      for (i = _i = 0, _ref1 = b.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        this.push_byte(b.charCodeAt(i));
      }
      return this;
    };

    Buffer.prototype.base16_decode = function(data) {
      var c, i, last, v, _i, _len;
      if ((data.length % 2) !== 0) {
        return null;
      } else {
        last = 0;
        for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
          c = data[i];
          if (!((v = this.B16.rev[c]) != null)) return null;
          if (i % 2 === 0) {
            last = v;
          } else {
            this.push_byte((last << 4) | v);
          }
        }
        return this;
      }
    };

    Buffer.prototype._base64_decode = function(data, M) {
      var c, i, npad, sum, v, _i, _j, _len;
      if ((data.length % 4) !== 0) {
        return null;
      } else {
        sum = 0;
        npad = 0;
        for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
          c = data[i];
          if ((v = M.rev[c]) == null) return null;
          if (c === '=') npad++;
          sum = (sum << 6) | v;
          if (i % 4 === 3) {
            for (i = _j = 2; 2 <= npad ? _j <= npad : _j >= npad; i = 2 <= npad ? ++_j : --_j) {
              this.push_byte((sum >> i * 8) & 0xff);
            }
            sum = 0;
          }
        }
        return this;
      }
    };

    Buffer.prototype.base64_decode = function(data) {
      return this._base64_decode(data, this.B64);
    };

    Buffer.prototype.base64a_decode = function(data) {
      return this._base64_decode(data, this.B64A);
    };

    Buffer.prototype.base64x_decode = function(data) {
      return this._base64_decode(data, this.B64X);
    };

    Buffer.prototype.base32_decode = function(data) {
      var before, c, i, j, nmb, rem, sum, v, _i, _j, _k, _l, _len, _ref1;
      sum = 0;
      for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
        c = data[i];
        if ((v = this.B32.rev[c]) == null) return null;
        before = sum;
        sum = (sum * 32) + v;
        if (i % 8 === 7) {
          for (j = _j = 4; _j >= 0; j = --_j) {
            this.push_byte(rshift(sum, j * 8) & 0xff);
          }
          sum = 0;
        }
      }
      if ((rem = data.length % 8) !== 0) {
        for (i = _k = 8; 8 <= rem ? _k < rem : _k > rem; i = 8 <= rem ? ++_k : --_k) {
          sum *= 32;
        }
        if ((nmb = {
          2: 1,
          4: 2,
          5: 3,
          7: 4
        }[rem]) == null) {
          return null;
        }
        for (i = _l = 4, _ref1 = 4 - nmb; 4 <= _ref1 ? _l < _ref1 : _l > _ref1; i = 4 <= _ref1 ? ++_l : --_l) {
          this.push_byte(rshift(sum, i * 8) & 0xff);
        }
      }
      return this;
    };

    Buffer.prototype.consume_byte = function() {
      return this._get(this._cp++);
    };

    Buffer.prototype.consume_bytes = function(n) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        _results.push(this.consume_byte());
      }
      return _results;
    };

    Buffer.prototype.consume_string = function(n) {
      return String.fromCharCode.apply(String, this.consume_bytes(n));
    };

    return Buffer;

  })();

}).call(this);
}, "const": function(exports, require, module) {// Generated by IcedCoffeeScript 1.3.3g
(function() {

  exports.C = {
    "null": 0xc0,
    "false": 0xc2,
    "true": 0xc3,
    float: 0xca,
    double: 0xcb,
    uint8: 0xcc,
    uint16: 0xcd,
    uint32: 0xce,
    uint64: 0xcf,
    int8: 0xd0,
    int16: 0xd1,
    int32: 0xd2,
    int64: 0xd3,
    raw16: 0xda,
    raw32: 0xdb,
    array16: 0xdc,
    array32: 0xdd,
    map16: 0xde,
    map32: 0xdf,
    fix_raw_min: 0xa0,
    fix_raw_max: 0xbf,
    fix_array_min: 0x90,
    fix_array_max: 0x9f,
    fix_map_min: 0x80,
    fix_map_max: 0x8f,
    fix_array_count_mask: 0xf,
    fix_map_count_mask: 0xf,
    fix_raw_count_mask: 0x1f,
    negative_fix_min: 0xe0,
    negative_fix_max: 0xff,
    negative_fix_mask: 0x1f,
    negative_fix_offset: 0x20,
    positive_fix_max: 0x7f,
    rpc_request: 0x00,
    rpc_response: 0x01,
    rpc_notify: 0x02
  };

}).call(this);
}, "floats": function(exports, require, module) {// Generated by IcedCoffeeScript 1.3.3g
(function() {
  var Browser, Converter, Node,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports.Converter = Converter = (function() {

    function Converter(_buffer) {
      this._buffer = _buffer;
    }

    Converter.prototype.pack_float32 = function(v) {
      return this._pack_float(v, 4);
    };

    Converter.prototype.pack_float64 = function(v) {
      return this._pack_float(v, 8);
    };

    Converter.prototype.consume_float32 = function() {
      return this._consume_float(4);
    };

    Converter.prototype.consume_float64 = function() {
      return this._consume_float(8);
    };

    Converter.make = function(b) {
      var klass;
      klass = (typeof DataView !== "undefined" && DataView !== null) && (typeof ArrayBuffer !== "undefined" && ArrayBuffer !== null) && (typeof Uint8Array !== "undefined" && Uint8Array !== null) ? Browser : typeof Buffer !== "undefined" && Buffer !== null ? Node : null;
      if (klass != null) {
        return new klass(b);
      } else {
        return null;
      }
    };

    return Converter;

  })();

  exports.Browser = Browser = (function(_super) {

    __extends(Browser, _super);

    function Browser() {
      return Browser.__super__.constructor.apply(this, arguments);
    }

    Browser.prototype._pack_float = function(v, n) {
      var ab, dv, ia;
      ab = new ArrayBuffer(n);
      ia = new Uint8Array(ab);
      dv = new DataView(ab);
      dv["setFloat" + (n << 3)].call(dv, 0, v, false);
      return this._buffer.push_buffer(ia);
    };

    Browser.prototype._consume_float = function(n) {
      var ab, b, dv, i, ia, _i, _len, _ref;
      ab = new ArrayBuffer(n);
      ia = new Uint8Array(ab);
      dv = new DataView(ab);
      _ref = this._buffer.consume_bytes(n);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        b = _ref[i];
        ia[i] = b;
      }
      return dv["getFloat" + (n << 3)].call(dv, 0, false);
    };

    return Browser;

  })(Converter);

  exports.Node = Node = (function(_super) {

    __extends(Node, _super);

    function Node() {
      return Node.__super__.constructor.apply(this, arguments);
    }

    Node.prototype._pack_float = function(v, n) {
      var b, f;
      b = new Buffer(n);
      f = n === 4 ? "writeFloatBE" : "writeDoubleBE";
      return b[f].call(b, v, 0);
    };

    Node.prototype._consume_float = function(n) {
      var b, f;
      b = new Buffer(this._buffer.consume_bytes(n));
      f = n === 4 ? "readFloatBE" : "readDoubleBE";
      return b[f].call(b, 0);
    };

    return Node;

  })(Converter);

}).call(this);
}, "main": function(exports, require, module) {// Generated by IcedCoffeeScript 1.3.3g
(function() {

  exports.pack = require('./pack').pack;

  exports.unpack = require('./unpack').unpack;

  exports.Buffer = require('./buffer').Buffer;

  exports.FloatConverter = require('./floats').Converter;

}).call(this);
}, "pack": function(exports, require, module) {// Generated by IcedCoffeeScript 1.3.3g
(function() {
  var Buffer, C, Packer, U32MAX, floats, is_array, is_int, pow2, rshift, twos_compl, u64max_minus_i, _ref;

  C = require('./const').C;

  Buffer = require('./buffer').Buffer;

  _ref = require('./util'), pow2 = _ref.pow2, rshift = _ref.rshift, twos_compl = _ref.twos_compl, U32MAX = _ref.U32MAX;

  floats = require('./floats');

  is_array = function(x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };

  is_int = function(f) {
    return Math.floor(f) === f;
  };

  u64max_minus_i = function(i) {
    var a, b, x, y;
    x = Math.floor(i / U32MAX);
    y = i % U32MAX;
    a = U32MAX - x - (y > 0 ? 1 : 0);
    b = y === 0 ? 0 : U32MAX - y;
    return [a, b];
  };

  exports.Packer = Packer = (function() {

    function Packer() {
      this._buffer = new Buffer();
    }

    Packer.prototype.output = function(enc) {
      return this._buffer.toString(enc);
    };

    Packer.prototype.p = function(o) {
      switch (typeof o) {
        case 'number':
          return this.p_number(o);
        case 'string':
          return this.p_bytes(o);
        case 'boolean':
          return this.p_boolean(o);
        case 'object':
          if (!(o != null)) {
            return this.p_null();
          } else if (is_array(o)) {
            return this.p_array(o);
          } else {
            return this.p_obj(o);
          }
      }
    };

    Packer.prototype.p_number = function(n) {
      if (!is_int(n)) {
        return this.p_pack_double(n);
      } else if (n >= 0) {
        return this.p_positive_int(n);
      } else {
        return this.p_negative_int(n);
      }
    };

    Packer.prototype.p_pack_double = function(d) {
      var cnv;
      cnv = floats.Converter.make(this._buffer);
      if (cnv != null) {
        this.p_byte(C.double);
        return cnv.pack_float64(d);
      } else {
        return this.p_number(Math.floor(d));
      }
    };

    Packer.prototype.p_byte = function(b) {
      return this._buffer.push_byte(twos_compl(b, 8));
    };

    Packer.prototype.p_short = function(s) {
      return this._buffer.push_short(twos_compl(s, 16));
    };

    Packer.prototype.p_int = function(i) {
      return this._buffer.push_int(twos_compl(i, 32));
    };

    Packer.prototype.p_neg_int64 = function(i) {
      var a, abs_i, b, _ref1;
      abs_i = 0 - i;
      _ref1 = u64max_minus_i(abs_i), a = _ref1[0], b = _ref1[1];
      this.p_int(a);
      return this.p_int(b);
    };

    Packer.prototype.p_boolean = function(b) {
      return this.p_byte(b ? C["true"] : C["false"]);
    };

    Packer.prototype.p_null = function() {
      return this.p_byte(C["null"]);
    };

    Packer.prototype.p_array = function(a) {
      var e, _i, _len, _results;
      this.p_len(a.length, C.fix_array_min, C.array16, C.array32);
      _results = [];
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        e = a[_i];
        _results.push(this.p(e));
      }
      return _results;
    };

    Packer.prototype.p_obj = function(o) {
      var k, n, v, _results;
      n = (Object.keys(o)).length;
      this.p_len(n, C.fix_map_min, C.map16, C.map32);
      _results = [];
      for (k in o) {
        v = o[k];
        this.p(k);
        _results.push(this.p(v));
      }
      return _results;
    };

    Packer.prototype.p_positive_int = function(i) {
      if (i <= 0x7f) {
        return this.p_byte(i);
      } else if (i <= 0xff) {
        this.p_byte(C.uint8);
        return this.p_byte(i);
      } else if (i <= 0xffff) {
        this.p_byte(C.uint16);
        return this.p_short(i);
      } else if (i < U32MAX) {
        this.p_byte(C.uint32);
        return this.p_int(i);
      } else {
        this.p_byte(C.uint64);
        this.p_int(Math.floor(i / U32MAX));
        return this.p_int(i & (U32MAX - 1));
      }
    };

    Packer.prototype.p_negative_int = function(i) {
      if (i >= -32) {
        return this.p_byte(i);
      } else if (i >= -128) {
        this.p_byte(C.int8);
        return this.p_byte(i);
      } else if (i >= -32768) {
        this.p_byte(C.int16);
        return this.p_short(i);
      } else if (i >= -2147483648) {
        this.p_byte(C.int32);
        return this.p_int(i);
      } else {
        this.p_byte(C.int64);
        return this.p_neg_int64(i);
      }
    };

    Packer.prototype.p_bytes = function(b) {
      this.p_len(b.length, C.fix_raw_min, C.raw16, C.raw32);
      return this._buffer.push_bytes(b);
    };

    Packer.prototype.p_len = function(l, s, m, b) {
      if (l <= 0xf) {
        return this.p_byte(l | s);
      } else if (l <= 0xffff) {
        this.p_byte(m);
        return this.p_short(l);
      } else {
        this.p_byte(b);
        return this.p_int(l);
      }
    };

    return Packer;

  })();

  exports.pack = function(x, enc) {
    var packer;
    packer = new Packer();
    packer.p(x);
    return packer.output(enc);
  };

}).call(this);
}, "unpack": function(exports, require, module) {// Generated by IcedCoffeeScript 1.3.3g
(function() {
  var Buffer, C, U32MAX, Unpacker, floats, pow2, twos_compl_inv, _ref;

  C = require('./const').C;

  Buffer = require('./buffer').Buffer;

  _ref = require('./util'), pow2 = _ref.pow2, twos_compl_inv = _ref.twos_compl_inv, U32MAX = _ref.U32MAX;

  floats = require('./floats');

  exports.Unpacker = Unpacker = (function() {

    function Unpacker() {
      this._buffer = null;
      this._e = [];
    }

    Unpacker.prototype.decode = function(s, enc) {
      return !!(this._buffer = Buffer.decode(s, enc));
    };

    Unpacker.prototype.u_raw = function(n) {
      return this._buffer.consume_string(n);
    };

    Unpacker.prototype.get_error = function() {
      if (this._e.length) {
        return this._e;
      } else {
        return null;
      }
    };

    Unpacker.prototype.u_array = function(n) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        _results.push(this.u());
      }
      return _results;
    };

    Unpacker.prototype.u_map = function(n) {
      var i, ret, _i;
      ret = {};
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        ret[this.u()] = this.u();
      }
      return ret;
    };

    Unpacker.prototype.u_uint8 = function() {
      return this._buffer.consume_byte();
    };

    Unpacker.prototype.u_int8 = function() {
      return twos_compl_inv(this.u_uint8(), 8);
    };

    Unpacker.prototype.u_uint16 = function() {
      var v;
      v = this._buffer.consume_bytes(2);
      return v[0] << 8 | v[1];
    };

    Unpacker.prototype.u_int16 = function() {
      return twos_compl_inv(this.u_uint16(), 16);
    };

    Unpacker.prototype.u_uint32 = function() {
      var b, i, sum, v, _i, _len;
      v = this._buffer.consume_bytes(4);
      sum = 0;
      for (i = _i = 0, _len = v.length; _i < _len; i = ++_i) {
        b = v[i];
        sum += b * pow2(8 * (3 - i));
      }
      return sum;
    };

    Unpacker.prototype.u_int32 = function() {
      return twos_compl_inv(this.u_uint32(), 32);
    };

    Unpacker.prototype.u_uint64 = function() {
      return (this.u_uint32() * U32MAX) + this.u_uint32();
    };

    Unpacker.prototype.u_double = function() {
      var cnv;
      cnv = floats.Converter.make(this._buffer);
      if (cnv != null) {
        return cnv.consume_float64();
      } else {
        return this.error("Sorry, no float64 decoding support");
      }
    };

    Unpacker.prototype.u_float = function() {
      var cnv;
      cnv = floats.Converter.make(this._buffer);
      if (cnv != null) {
        return cnv.consume_float32();
      } else {
        return this.error("Sorry, no float32 decoding support");
      }
    };

    Unpacker.prototype.u_int64 = function() {
      var a, b, i, _ref1;
      _ref1 = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < 2; i = ++_i) {
          _results.push(this.u_uint32());
        }
        return _results;
      }).call(this), a = _ref1[0], b = _ref1[1];
      return U32MAX * (a - U32MAX) + b;
    };

    Unpacker.prototype.error = function(e) {
      this._e.push(e);
      return null;
    };

    Unpacker.prototype.u = function() {
      var b, l;
      b = this._buffer.consume_byte();
      if (b <= C.positive_fix_max) {
        return b;
      } else if (b >= C.negative_fix_min && b <= C.negative_fix_max) {
        return twos_compl_inv(b, 8);
      } else if (b >= C.fix_raw_min && b <= C.fix_raw_max) {
        l = b & C.fix_raw_count_mask;
        return this.u_raw(l);
      } else if (b >= C.fix_array_min && b <= C.fix_array_max) {
        l = b & C.fix_array_count_mask;
        return this.u_array(l);
      } else if (b >= C.fix_map_min && b <= C.fix_map_max) {
        l = b & C.fix_map_count_mask;
        return this.u_map(l);
      } else {
        switch (b) {
          case C["null"]:
            return null;
          case C["true"]:
            return true;
          case C["false"]:
            return false;
          case C.uint8:
            return this.u_uint8();
          case C.uint16:
            return this.u_uint16();
          case C.uint32:
            return this.u_uint32();
          case C.uint64:
            return this.u_uint64();
          case C.int8:
            return this.u_int8();
          case C.int16:
            return this.u_int16();
          case C.int32:
            return this.u_int32();
          case C.int64:
            return this.u_int64();
          case C.double:
            return this.u_double();
          case C.float:
            return this.u_float();
          case C.raw16:
            return this.u_raw(this.u_uint16());
          case C.raw32:
            return this.u_raw(this.u_uint32());
          case C.array16:
            return this.u_array(this.u_uint16());
          case C.array32:
            return this.u_array(this.u_uint32());
          case C.map16:
            return this.u_map(this.u_uint16());
          case C.map32:
            return this.u_map(this.u_uint32());
          default:
            return this.error("unhandled type " + b);
        }
      }
    };

    return Unpacker;

  })();

  exports.unpack = function(x, enc) {
    var err, res, unpacker;
    if (enc == null) enc = 'base64';
    unpacker = new Unpacker;
    err = null;
    res = null;
    if (unpacker.decode(x, enc)) {
      res = unpacker.u();
      err = unpacker.get_error();
    } else {
      err = "Decoding type '" + enc + "' failed";
    }
    return [err, res];
  };

}).call(this);
}, "util": function(exports, require, module) {// Generated by IcedCoffeeScript 1.3.3g
(function() {
  var U32MAX, pow2;

  exports.pow2 = pow2 = function(n) {
    if (n < 31) {
      return 1 << n;
    } else {
      return Math.pow(2, n);
    }
  };

  exports.U32MAX = U32MAX = pow2(32);

  exports.rshift = function(b, n) {
    if (n < 31) {
      return b >> n;
    } else {
      return Math.floor(b / Math.pow(2, n));
    }
  };

  exports.twos_compl = function(x, n) {
    if (x < 0) {
      return pow2(n) - Math.abs(x);
    } else {
      return x;
    }
  };

  exports.twos_compl_inv = function(x, n) {
    return x - pow2(n);
  };

}).call(this);
}});
